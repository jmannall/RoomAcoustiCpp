/*
* @class Directvity
*
* @brief Declaration of Directivity class
*
*/

#ifndef RoomAcoustiCpp_Directivity_h
#define RoomAcoustiCpp_Directivity_h

// Common headers
#include "Common/Types.h"
#include "Common/Definitions.h"
#include "Common/Complex.h"
#include "Common/Coefficients.h"

// C++ headers
#include <vector>

namespace RAC
{
	using namespace Common;
	namespace Spatialiser
	{
		/**
		* @brief Class that stores directivity as spherical harmonics for given frequency bands
		*/
		class Directivity
		{
		public:
			/**
			* @brief Constructor that initialises the Directivity
			*
			* @params Centre frequencies of the spherical harmonics
			* @params Spherical harmonic coefficients
			*/
			Directivity(std::vector<Real> fc, std::vector<std::vector<Complex>> coefficients, std::vector<Real> invDirectivityFactor) : coefficients(coefficients), invDirectivityFactor(invDirectivityFactor)
			{
				for (int i = 0; i < fc.size() - 1; ++i)
					fm.push_back(fc[i] * sqrt(fc[i + 1] / fc[i]));

				CalculateOmniResponse();
			}

			/**
			* @brief Calculate the directivity response for a given frequencies and direction
			*
			* @params frequencies The frequencies to calculate the directivity for
			* @params theta 0 to PI (0 to 180 degrees) 0 points along the forward axis, PI/2 perpendicular to the forward axis and PI is opposing the forward axis
			* @params phi 0 to 2PI (360 degrees) where 0 is the front, top or rear of the source and PI is the bottom of the source (rotates clockwise around the forward axis).
			*
			* @remark Uses front-pole orientation (RHS)
			*
			* @return The directivity at the given frequency for a given direction
			*/
			inline Absorption Response(const Coefficients& frequencies, Real theta, Real phi) const
			{
				Absorption output(frequencies.Length());
				for (int i = 0; i < frequencies.Length(); ++i)
					output[i] = SingleResponse(frequencies[i], theta, phi);
				return output;
			}

			inline Coefficients AverageResponse(const Coefficients& frequencies) const
			{
				Coefficients output(frequencies.Length());
				for (int i = 0; i < frequencies.Length(); ++i)
					output[i] = AverageResponse(frequencies[i]);
				return output;
			}

		private:

			/**
			* @brief Calculate the directivity response for a given frequency and direction
			*
			* @params f The frequency to calculate the directivity for
			* @params theta 0 to PI (0 to 180 degrees) 0 points along the forward axis, PI/2 perpendicular to the forward axis and PI is opposing the forward axis
			* @params phi 0 to 2PI (360 degrees) where 0 is the front, top or rear of the source and PI is the bottom of the source (rotates clockwise around the forward axis).
			*
			* @remark Uses front-pole orientation
			*
			* @return The directivity at the given frequency for a given direction
			*/
			inline Real SingleResponse(Real f, Real theta, Real phi) const
			{
				int idx = GetFrequencyIndex(f);
				Complex output = coefficients[idx][0];
				int len = std::sqrt(coefficients[idx].size());
				for (int i = 1; i < len; ++i)
				{
					for (int j = -i; j < i + 1; ++j)
					{
						Complex y = SphericalHarmonic(i, j, theta, phi);
						output += coefficients[idx][i * i + i + j] * y;
					}
				}
				return std::abs(output);
			}

			inline Real AverageResponse(Real f) const
			{
				int idx = GetFrequencyIndex(f);
				return invDirectivityFactor[idx];
			}

			inline int GetFrequencyIndex(Real f) const
			{
				return std::upper_bound(fm.begin(), fm.end(), f) - fm.begin();
			}

			/**
			* @brief Precompute the omni-directional response
			*/
			inline void CalculateOmniResponse()
			{
				for (int i = 0; i < coefficients.size(); ++i)
					coefficients[i][0] = coefficients[i][0] * SphericalHarmonic(0, 0, 0.0, 0.0);
			}

			/**
			* @brief Calculate the spherical harmonics for a given direction and indices
			*
			* @parmas l Shpherical harmonic order
			* @parmas m Spherical harmonic degree
			* @params theta 0 to PI (0 to 180 degrees) 0 points along the forward axis, PI/2 perpendicular to the forward axis and PI is opposing the forward axis
			* @params phi 0 to 2PI (360 degrees) where 0 is the front, top or rear of the source and PI is the bottom of the source (rotates clockwise around the forward axis).
			*
			* @return The spherical harmonic at the given indices and direction
			*/
			inline Complex SphericalHarmonic(int l, int m, Real theta, Real phi) const
			{
				bool isNegative = m < 0;
				bool isOdd = m % 2 != 0;

				m = std::abs(m);
				// Compute the associated Legendre polynomial sqrt((2l+1)/(4pi)) sqrt((l-m)!/(l+m)!) P_l^m(cos(theta))
				Real P_lm = NormalisedSHLegendrePlm(l, m, std::cos(theta));

				// Compute the exponential term
				Complex E = std::exp(Complex(0, m * phi));

				if (isNegative)
				{
					E = std::conj(E);
					E = isOdd ? -E : E;
				}

				// Compute spherical harmonic
				return P_lm * E;
			}

			std::vector<Real> fm;								// Mid frequencies
			std::vector<std::vector<Complex>> coefficients;		// Spherical harmonics coefficients
			std::vector<Real> invDirectivityFactor;				// 1 / Directivity Factor (DF) -> DF = 10 ^ (Directivity Index / 20)
		};

		/**
		* @brief Genelec 8020c directivity data as spherical harmonics
		* 
		* @remark Calculated from the BRAS Database directivity measurements
		*/
		const static std::vector<std::vector<Complex>> GENELEC_DIRECTIVITY = {
			{ 2.766636223269717 },
			{ 3.510204359827254 },
			{ 3.370669765047719 },

			{ 2.643252520696653,
			Complex(-0.06378878999705563, 0.007090436827746262),
			0.4755028949617127,
			Complex(0.06378878999705563, 0.007090436827746262),
			Complex(-0.007666568829426733, 0.005026130966728624),
			Complex(0.005525955252422628, 0.006698670429609572),
			0.1463853447267131,
			Complex(-0.005525955252422628, 0.006698670429609572),
			Complex(-0.007666568829426733, -0.005026130966728624) },

			{ 1.971281249334056,
			Complex(0.02889556229338048, 0.01018876593351745),
			0.5431163683750778,
			Complex(-0.02889556229338048, 0.01018876593351745),
			Complex(-0.02229499021966638, 0.004820955216572651),
			Complex(0.01431655260808182, 0.003179361429608207),
			0.1440687510931686,
			Complex(-0.01431655260808182, 0.003179361429608207),
			Complex(-0.02229499021966638, -0.004820955216572651) },

			{ 1.371005882127215,
			Complex(0.01465622165031597, 0.005150445994157965),
			0.7203869995157548,
			Complex(-0.01465622165031597, 0.005150445994157965),
			Complex(-0.06506153775794052, 0.003971700076610293),
			Complex(0.03672090898808478, 0.006186859996125231),
			0.3519533012066185,
			Complex(-0.03672090898808478, 0.006186859996125231),
			Complex(-0.06506153775794052, -0.003971700076610293),
			Complex(-0.03573843546402124, -0.002652373857385134),
			Complex(-0.05323040551807014, 0.002857151197158333),
			Complex(0.04969704887794277, 0.003899362457386936),
			0.1213301221517003,
			Complex(-0.04969704887794277, 0.003899362457386936),
			Complex(-0.05323040551807014, -0.002857151197158333),
			Complex(0.03573843546402124, -0.002652373857385134),
			Complex(0.03407268517644998, 0.0005604879268815069),
			Complex(-0.02427061374561473, -0.0007516230067301988),
			Complex(-0.01661339259383504, 0.00112022379533553),
			Complex(0.01494924596383813, 0.002083991668547428),
			0.06504831608601033,
			Complex(-0.01494924596383813, 0.002083991668547428),
			Complex(-0.01661339259383504, -0.00112022379533553),
			Complex(0.02427061374561473, -0.0007516230067301988),
			Complex(0.03407268517644998, -0.0005604879268815069),
			Complex(0.008671086074372891, 0.0009933559861028814),
			Complex(0.0003405978397756331, -0.000398332964701721),
			Complex(0.006535983102050712, -0.001657677861702671),
			Complex(-0.02080703481891501, 0.001056521320370967),
			Complex(0.004143916000747911, -0.001617948439047128),
			-0.006041209534189487,
			Complex(-0.004143916000747911, -0.001617948439047128),
			Complex(-0.02080703481891501, -0.001056521320370967),
			Complex(-0.006535983102050712, -0.001657677861702671),
			Complex(0.0003405978397756331, 0.000398332964701721),
			Complex(-0.008671086074372891, 0.0009933559861028814),
			Complex(-0.001950360645907474, 0.0007309708894564335),
			Complex(-0.002854974344045504, 0.0006455484711812288),
			Complex(0.01365635548321052, -0.0006008598925170762),
			Complex(-0.003911751908426542, 0.0003470513938331188),
			Complex(-0.004772512308519211, 0.000133518945959545),
			Complex(0.002811398070564516, 0.002680785401095461),
			0.04133456898118468,
			Complex(-0.002811398070564516, 0.002680785401095461),
			Complex(-0.004772512308519211, -0.000133518945959545),
			Complex(0.003911751908426542, 0.0003470513938331188),
			Complex(0.01365635548321052, 0.0006008598925170762),
			Complex(0.002854974344045504, 0.0006455484711812288),
			Complex(-0.001950360645907474, -0.0007309708894564335) },

			{ 1.079875023093153,
			Complex(-0.01591201397735463, 0.03521137618668607),
			0.6645686336481645,
			Complex(0.01591201397735463, 0.03521137618668607),
			Complex(-0.03392356540162603, 0.003929059384184109),
			Complex(-0.01361055184812774, 0.01591265389215903),
			0.2877514264496888,
			Complex(0.01361055184812774, 0.01591265389215903),
			Complex(-0.03392356540162603, -0.003929059384184109),
			Complex(-0.03949587806586746, -0.0011077826263378),
			Complex(-0.03752350215916078, 0.002913609763120799),
			Complex(0.03480357892091597, 0.008857653962816254),
			0.1209611709092979,
			Complex(-0.03480357892091597, 0.008857653962816254),
			Complex(-0.03752350215916078, -0.002913609763120799),
			Complex(0.03949587806586746, -0.0011077826263378),
			Complex(0.03620602536810302, -0.003333143782149771),
			Complex(-0.03411824772634646, -0.001269141336789064),
			Complex(-0.04751815421832872, 0.001490290384137158),
			Complex(0.04598590902774496, 0.001343738788091982),
			0.04222948354414124,
			Complex(-0.04598590902774496, 0.001343738788091982),
			Complex(-0.04751815421832872, -0.001490290384137158),
			Complex(0.03411824772634646, -0.001269141336789064),
			Complex(0.03620602536810302, 0.003333143782149771),
			Complex(0.02112646045381452, 0.002285478320853026),
			Complex(0.02264175922790192, -0.0016663280588086),
			Complex(-0.04307264978070711, -0.001954752843038371),
			Complex(-0.04051318837427384, -0.001101231063946956),
			Complex(0.04190211996852322, -0.0003719423797001633),
			0.03928218283499108,
			Complex(-0.04190211996852322, -0.0003719423797001633),
			Complex(-0.04051318837427384, 0.001101231063946956),
			Complex(0.04307264978070711, -0.001954752843038371),
			Complex(0.02264175922790192, 0.0016663280588086),
			Complex(-0.02112646045381452, 0.002285478320853026),
			Complex(0.001644520423164452, 0.002725563545815284),
			Complex(0.005459239002691167, 0.002237564809967052),
			Complex(0.03195096701971605, -0.001788003602343518),
			Complex(-0.005235219237540775, -0.001465897165191879),
			Complex(-0.04696048451243028, 0.003381128648639387),
			Complex(0.03477313253669757, -0.0002158112504008393),
			0.04331579451489143,
			Complex(-0.03477313253669757, -0.0002158112504008393),
			Complex(-0.04696048451243028, -0.003381128648639387),
			Complex(0.005235219237540775, -0.001465897165191879),
			Complex(0.03195096701971605, 0.001788003602343518),
			Complex(-0.005459239002691167, 0.002237564809967052),
			Complex(0.001644520423164452, -0.002725563545815284) },
				
			{ 1.020956544644417,
			Complex(0.02417992032239375, 0.03626642426344258), 
			0.7711353559407504,
			Complex(-0.02417992032239375, 0.03626642426344258),
			Complex(-0.01675083809415848, 0.002576112550414257),
			Complex(0.000676587781670709, 0.02746801545400455),
			0.3480513546283334,
			Complex(-0.000676587781670709, 0.02746801545400455),
			Complex(-0.01675083809415848, -0.002576112550414257),
			Complex(-0.004144717996189857, -0.001307801595332193),
			Complex(-0.03428535428366392, 0.003087696070941409),
			Complex(0.01525985638854333, 0.01526155422951623),
			0.1068412338155071,
			Complex(-0.01525985638854333, 0.01526155422951623),
			Complex(-0.03428535428366392, -0.003087696070941409),
			Complex(0.004144717996189857, -0.001307801595332193),
			Complex(0.01020372686028346, -0.001869983399214615),
			Complex(0.001676679481621961, -0.002205156640858645),
			Complex(-0.03557265576435883, 0.001660162547686503),
			Complex(0.01372228590336817, 0.004857497772512018),
			0.03286575105437474,
			Complex(-0.01372228590336817, 0.004857497772512018),
			Complex(-0.03557265576435883, -0.001660162547686503),
			Complex(-0.001676679481621961, -0.002205156640858645),
			Complex(0.01020372686028346, 0.001869983399214615),
			Complex(-0.00391579209949051, 0.001028273638907665),
			Complex(0.001470390120367123, -0.002016653673946862),
			Complex(0.001364700150932853, -0.002489627206999827),
			Complex(-0.02413258633756256, 0.001298631426188427),
			Complex(0.0009603640767601758, 0.002438272223348798),
			0.02887285438743538,
			Complex(-0.0009603640767601758, 0.002438272223348798),
			Complex(-0.02413258633756256, -0.001298631426188427),
			Complex(-0.001364700150932853, -0.002489627206999827),
			Complex(0.001470390120367123, 0.002016653673946862),
			Complex(0.00391579209949051, 0.001028273638907665),
			Complex(-0.0008940023557373604, 0.0006052270866897933),
			Complex(0.005779750858922311, 0.0004890708056022539),
			Complex(0.001456937912812456, -0.001987163534856859),
			Complex(0.00665904898993426, -0.001790023508193129),
			Complex(-0.01817676491996237, 0.001053407787695536),
			Complex(-0.004550367153604587, 0.0003286804269762058),
			0.01516009824623389,
			Complex(0.004550367153604587, 0.0003286804269762058),
			Complex(-0.01817676491996237, -0.001053407787695536),
			Complex(-0.00665904898993426, -0.001790023508193129),
			Complex(0.001456937912812456, 0.001987163534856859),
			Complex(-0.005779750858922311, 0.0004890708056022539),
			Complex(-0.0008940023557373604, -0.0006052270866897933) },
				
			{ 1.078384885516497,
			Complex(-0.03949419706171676, -0.03888949270423943),
			0.9981864785352955,
			Complex(0.03949419706171676, -0.03888949270423943),
			Complex(-0.03741038349568027, 0.007655453896678731),
			Complex(-0.07557958767443998, -0.03530763050237781),
			0.5072223867307808,
			Complex(0.07557958767443998, -0.03530763050237781),
			Complex(-0.03741038349568027, -0.007655453896678731),
			Complex(0.04110954589823154, 0.04915461868298886),
			Complex(-0.04162576872044612, 0.001442333060797832),
			Complex(-0.05973577306044742, -0.02551262723767557),
			0.1410510733661451,
			Complex(0.05973577306044742, -0.02551262723767557),
			Complex(-0.04162576872044612, -0.001442333060797832),
			Complex(-0.04110954589823154, 0.04915461868298886),
			Complex(-0.001280110193030422, 0.02070289021809785),
			Complex(0.03209671362506767, 0.04039850889893006),
			Complex(-0.01971847901258142, 0.0002175832049497476),
			Complex(-0.04156180187624915, -0.01200796518335175),
			-0.01140566301675476,
			Complex(0.04156180187624915, -0.01200796518335175),
			Complex(-0.01971847901258142, -0.0002175832049497476),
			Complex(-0.03209671362506767, 0.04039850889893006),
			Complex(-0.001280110193030422, -0.02070289021809785),
			Complex(6.050143750309207e-05, 0.004172382810979896),
			Complex(-0.001284917857736404, 0.01974822524954203),
			Complex(0.02534455252556334, 0.03364491587569302),
			Complex(0.004541991073268929, -0.002154106796140623),
			Complex(-0.02644764780088124, -0.004533079215875051), 
			-0.03432832548499063,
			Complex(0.02644764780088124, -0.004533079215875051),
			Complex(0.004541991073268929, 0.002154106796140623),
			Complex(-0.02534455252556334, 0.03364491587569302),
			Complex(-0.001284917857736404, -0.01974822524954203),
			Complex(-6.050143750309207e-05, 0.004172382810979896),
			Complex(-0.005089435253062009, 0.002917713620214967),
			Complex(-0.005384907927317886, 0.00198902469323178),
			Complex(0.0003346052438377041, 0.01909175133209651),
			Complex(0.01882995198638314, 0.01941729262055861),
			Complex(0.02177995108190787, 0.000678366467010034),
			Complex(-0.01943220394036732, -0.002680263547806157),
			-0.04392492004514483,
			Complex(0.01943220394036732, -0.002680263547806157),
			Complex(0.02177995108190787, -0.000678366467010034),
			Complex(-0.01882995198638314, 0.01941729262055861),
			Complex(0.0003346052438377041, -0.01909175133209651),
			Complex(0.005384907927317886, 0.00198902469323178),
			Complex(-0.005089435253062009, -0.002917713620214967) }
		};

		const static std::vector<std::vector<Complex>> GENELEC_DTF_DIRECTIVITY = {
			{ 1.295991906561134 },
			{ 1.296119508478259 },
			{ 1.288584492426131 },

			{ 1.301788528140654,
			Complex(-0.03410762225480182, 0.004093831753370732),
			0.2506206589630629,
			Complex(0.03410762225480182, 0.004093831753370732),
			Complex(-0.005258214610020059, 0.002596373758349465),
			Complex(0.00631368613874224, 0.003219499012239584),
			0.06736878851094105,
			Complex(-0.00631368613874224, 0.003219499012239584),
			Complex(-0.005258214610020059, -0.002596373758349465) },
			
			{ 1.327867110765315,
			Complex(0.02115671573382294, 0.00704536835267374),
			0.3744579612458214,
			Complex(-0.02115671573382294, 0.00704536835267374),
			Complex(-0.01541271130990696, 0.003294449007429785),
			Complex(0.008900311014800506, 0.002359718642743805),
			0.1008906581714702,
			Complex(-0.008900311014800506, 0.002359718642743805),
			Complex(-0.01541271130990696, -0.003294449007429785) },
			
			{ 1.427399651197738,
			Complex(0.009892286097559858, 0.001928693222087012),
			0.7738232285115313,
			Complex(-0.009892286097559858, 0.001928693222087012),
			Complex(-0.08084123356967267, 0.004113193059519253),
			Complex(0.04073967677925062, 0.005406346660051373),
			0.3986466290136831,
			Complex(-0.04073967677925062, 0.005406346660051373),
			Complex(-0.08084123356967267, -0.004113193059519253),
			Complex(-0.04512190513156925, -0.003002007745693319),
			Complex(-0.066672325988265, 0.002841731321032136),
			Complex(0.0546948907576553, 0.004228012902100841),
			0.1509847457446601,
			Complex(-0.0546948907576553, 0.004228012902100841),
			Complex(-0.066672325988265, -0.002841731321032136),
			Complex(0.04512190513156925, -0.003002007745693319),
			Complex(0.04597739508048428, 0.001145385650903297),
			Complex(-0.02588721837952779, -0.001209276912991564),
			Complex(-0.02832502428937465, 0.001438913502798574),
			Complex(0.02400442326170212, 0.001834678595463526),
			0.07576902548021577,
			Complex(-0.02400442326170212, 0.001834678595463526),
			Complex(-0.02832502428937465, -0.001438913502798574),
			Complex(0.02588721837952779, -0.001209276912991564),
			Complex(0.04597739508048428, -0.001145385650903297),
			Complex(0.01135670430063658, 0.001396352607582489),
			Complex(0.003273999338677832, -0.000422921033254358),
			Complex(0.006576089498561761, -0.002006535129146886),
			Complex(-0.02543249815298455, 0.0008820198923505158),
			Complex(0.005575440522324179, -0.001408423910764377),
			0.004105216302897579,
			Complex(-0.005575440522324179, -0.001408423910764377),
			Complex(-0.02543249815298455, -0.0008820198923505158),
			Complex(-0.006576089498561761, -0.002006535129146886),
			Complex(0.003273999338677832, 0.000422921033254358),
			Complex(-0.01135670430063658, 0.001396352607582489),
			Complex(-0.003188582501242371, 0.0007213691911572219),
			Complex(-0.00431979691410291, 0.0007992115555090597),
			Complex(0.01742830313483951, -0.0006331857780218646),
			Complex(-0.005957797556325933, 0.0003340227515386831),
			Complex(-0.007795583125359417, 0.0002498549559671647),
			Complex(0.004315663133149422, 0.00314968069257665),
			0.04586282821786002,
			Complex(-0.004315663133149422, 0.00314968069257665),
			Complex(-0.007795583125359417, -0.0002498549559671647),
			Complex(0.005957797556325933, 0.0003340227515386831),
			Complex(0.01742830313483951, 0.0006331857780218646),
			Complex(0.00431979691410291, 0.0007992115555090597),
			Complex(-0.003188582501242371, -0.0007213691911572219) },
			
			{ 1.588142421698908,
			Complex(-0.02474399094934194, 0.05133847839310973),
			0.9775016976212565,
			Complex(0.02474399094934194, 0.05133847839310973),
			Complex(-0.05099933704778936, 0.00577116169500315),
			Complex(-0.01923986679199466, 0.02317687614614125),
			0.4267036933432485,
			Complex(0.01923986679199466, 0.02317687614614125),
			Complex(-0.05099933704778936, -0.00577116169500315),
			Complex(-0.06110404006262034, -0.00167068390305396),
			Complex(-0.05709926399911885, 0.004224260873301042),
			Complex(0.05294526134474679, 0.01289808525239923),
			0.1816196674060959,
			Complex(-0.05294526134474679, 0.01289808525239923),
			Complex(-0.05709926399911885, -0.004224260873301042),
			Complex(0.06110404006262034, -0.00167068390305396),
			Complex(0.05484768020091954, -0.005120890403495277),
			Complex(-0.05101948605033096, -0.001866185423716431),
			Complex(-0.07202158627341781, 0.002349432341937305),
			Complex(0.06964923831444295, 0.001959304481616825),
			0.06517749764589795,
			Complex(-0.06964923831444295, 0.001959304481616825),
			Complex(-0.07202158627341781, -0.002349432341937305),
			Complex(0.05101948605033096, -0.001866185423716431),
			Complex(0.05484768020091954, 0.005120890403495277),
			Complex(0.03177446139595733, 0.003196004534126101),
			Complex(0.03383489479873702, -0.002519549485423525),
			Complex(-0.06451188840726534, -0.002887269890921626),
			Complex(-0.06032056097771722, -0.001574365872732492),
			Complex(0.0625880717785606, -0.0004942999994188057),
			0.05962218970351451,
			Complex(-0.0625880717785606, -0.0004942999994188057),
			Complex(-0.06032056097771722, 0.001574365872732492),
			Complex(0.06451188840726534, -0.002887269890921626),
			Complex(0.03383489479873702, 0.002519549485423525),
			Complex(-0.03177446139595733, 0.003196004534126101),
			Complex(0.001378383617940054, 0.004100806937739291),
			Complex(0.007904463278496436, 0.003330640029156644),
			Complex(0.04774884025759007, -0.002659731619807094),
			Complex(-0.007885072811664328, -0.002134736535731044),
			Complex(-0.0696391501229531, 0.004984942696648891),
			Complex(0.05120000657514187, -0.0004375523607743164),
			0.06389066675906885,
			Complex(-0.05120000657514187, -0.0004375523607743164),
			Complex(-0.0696391501229531, -0.004984942696648891),
			Complex(0.007885072811664328, -0.002134736535731044),
			Complex(0.04774884025759007, 0.002659731619807094),
			Complex(-0.007904463278496436, 0.003330640029156644),
			Complex(0.001378383617940054, -0.004100806937739291) },
			
			{ 1.769002547428755,
			Complex(0.04254854121390602, 0.06082176520692028),
			1.341174943211376,
			Complex(-0.04254854121390602, 0.06082176520692028),
			Complex(-0.02934955074980927, 0.004317036632216702),
			Complex(0.001694247581578901, 0.04636626754227178),
			0.6045307174251675,
			Complex(-0.001694247581578901, 0.04636626754227178),
			Complex(-0.02934955074980927, -0.004317036632216702),
			Complex(-0.006744394317802805, -0.001937060233381748),
			Complex(-0.05776069271257836, 0.005298377186005235),
			Complex(0.02568372097965947, 0.02574733544248829),
			0.1830349662844968,
			Complex(-0.02568372097965947, 0.02574733544248829),
			Complex(-0.05776069271257836, -0.005298377186005235),
			Complex(0.006744394317802805, -0.001937060233381748),
			Complex(0.01595933582230417, -0.003203596905099306),
			Complex(0.003462823519186702, -0.003601335803468549),
			Complex(-0.05933028271762231, 0.002820478367081066),
			Complex(0.02210840733165922, 0.008337834900346055),
			0.05368169968587568,
			Complex(-0.02210840733165922, 0.008337834900346055),
			Complex(-0.05933028271762231, -0.002820478367081066),
			Complex(-0.003462823519186702, -0.003601335803468549),
			Complex(0.01595933582230417, 0.003203596905099306),
			Complex(-0.006791269417012305, 0.001776374374583642),
			Complex(0.002201402244591819, -0.003447795315102898),
			Complex(0.003054977541789695, -0.004093471922084584),
			Complex(-0.03978135297374925, 0.002142255875627082),
			Complex(4.215799064549365e-05, 0.004333328331270551),
			0.04826925489926392,
			Complex(-4.215799064549365e-05, 0.004333328331270551),
			Complex(-0.03978135297374925, -0.002142255875627082),
			Complex(-0.003054977541789695, -0.004093471922084584),
			Complex(0.002201402244591819, 0.003447795315102898),
			Complex(0.006791269417012305, 0.001776374374583642),
			Complex(-0.00231531448392077, 0.001068507724688796),
			Complex(0.009503776444114945, 0.0009264835244451357),
			Complex(0.002815365770697573, -0.003317278478719766),
			Complex(0.0121789458252407, -0.003080340417251028),
			Complex(-0.02994786931642331, 0.001735905811642459),
			Complex(-0.009349508651815336, 0.0008422207452805549),
			0.02600915963197578,
			Complex(0.009349508651815336, 0.0008422207452805549),
			Complex(-0.02994786931642331, -0.001735905811642459),
			Complex(-0.0121789458252407, -0.003080340417251028),
			Complex(0.002815365770697573, 0.003317278478719766),
			Complex(-0.009503776444114945, 0.0009264835244451357),
			Complex(-0.00231531448392077, -0.001068507724688796) },
			
			{ 2.264411878310469,
			Complex(-0.0790309043009892, -0.08027890170498551),
			2.093140555463037,
			Complex(0.0790309043009892, -0.08027890170498551),
			Complex(-0.07987227511552067, 0.01452057068822823),
			Complex(-0.1544202306521613, -0.07292361927001131),
			1.061312521558603,
			Complex(0.1544202306521613, -0.07292361927001131),
			Complex(-0.07987227511552067, -0.01452057068822823),
			Complex(0.08279814287740696, 0.09546582088562403),
			Complex(-0.08703748667627771, 0.003296173322020752),
			Complex(-0.1231430217324585, -0.05300374891962603),
			0.292614324670473,
			Complex(0.1231430217324585, -0.05300374891962603),
			Complex(-0.08703748667627771, -0.003296173322020752),
			Complex(-0.08279814287740696, 0.09546582088562403),
			Complex(-0.004212924183998909, 0.03962891805385064),
			Complex(0.06471888006562172, 0.07863813746618763),
			Complex(-0.03992344772088778, 0.0007850637103215683),
			Complex(-0.08673762345904346, -0.02509578089555859),
			-0.02688910110828396,
			Complex(0.08673762345904346, -0.02509578089555859),
			Complex(-0.03992344772088778, -0.0007850637103215683),
			Complex(-0.06471888006562172, 0.07863813746618763),
			Complex(-0.004212924183998909, -0.03962891805385064),
			Complex(0.0004882489292317583, 0.007709771000695908),
			Complex(-0.003921906147440538, 0.0378586852940626),
			Complex(0.0507947301944853, 0.06584174001236534),
			Complex(0.01167263937563132, -0.003738667205866424),
			Complex(-0.05570199714977526, -0.009467770379088428),
			-0.07359659297110756,
			Complex(0.05570199714977526, -0.009467770379088428),
			Complex(0.01167263937563132, 0.003738667205866424),
			Complex(-0.0507947301944853, 0.06584174001236534),
			Complex(-0.003921906147440538, -0.0378586852940626),
			Complex(-0.0004882489292317583, 0.007709771000695908),
			Complex(-0.01151327492676753, 0.006638970781207049),
			Complex(-0.01074611297908576, 0.002875132296595698),
			Complex(-0.0001210166885796649, 0.03643369665769463),
			Complex(0.0383211499360923, 0.03831335497127467),
			Complex(0.04668197390831146, 0.0018380471049773),
			Complex(-0.04081150526914668, -0.005193951076875284),
			-0.09154562168046355,
			Complex(0.04081150526914668, -0.005193951076875284),
			Complex(0.04668197390831146, -0.0018380471049773),
			Complex(-0.0383211499360923, 0.03831335497127467),
			Complex(-0.0001210166885796649, -0.03643369665769463),
			Complex(0.01074611297908576, 0.002875132296595698),
			Complex(-0.01151327492676753, -0.006638970781207049) }
		};

		/**
		* @brief Genelec 8020c directivity index
		*
		* @remark Calculated from the BRAS Database directivity measurements
		* Stored as: 1 / Directivity Factor (DF) -> DF = 10 ^ (Directivity Index / 20) 
		*/
		const static std::vector<Real> GENELEC_DIRECTIVITY_INDEX = {
			0.996779582927969,
			0.997766996961373,
			0.950922228757372,
			0.737818486582158,
			0.613632382845031,
			0.397746067265630,
			0.324358636045665,
			0.319287031537848,
			0.275016364667025
		};

		/**
		* @brief Genelec 8020c directivity data
		*/
		const Directivity GENELEC = Directivity({ 62.5, 125.0, 250.0, 500.0, 1e3, 2e3, 4e3, 8e3, 16e3 }, GENELEC_DIRECTIVITY, GENELEC_DIRECTIVITY_INDEX);
		// TO DO: Calculate DTF Directivity Index. Or is it the same?
		const Directivity GENELEC_DTF = Directivity({ 62.5, 125.0, 250.0, 500.0, 1e3, 2e3, 4e3, 8e3, 16e3 }, GENELEC_DTF_DIRECTIVITY, GENELEC_DIRECTIVITY_INDEX);

	}
}
#endif