//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// predict.cpp
//
// Code generation for function 'predict'
//

// Include files
#include "predict.h"
#include "anonymous_function.h"
#include "elementwiseOperationInPlace.h"
#include "mySmallNN_internal_types.h"
#include "omp.h"
#include <algorithm>

// Type Definitions
struct cell_wrap_16 {
  float f1[20];
};

// Function Declarations
static void b_microKernel(int K, const float *A, int LDA, const float *B,
                          float *C);

static int div_s32_floor(int numerator, int denominator);

static void macroKernel(int M, int K, const float *A, int LDA, const float *B,
                        int LDB, float *C);

static void matrixMultiply(int M, int K, int blockSizeM, const float *A,
                           const float *B, float *C);

static void microKernel(int K, const float *A, int LDA, const float *B,
                        float *C);

// Function Definitions
static void b_microKernel(int K, const float *A, int LDA, const float *B,
                          float *C)
{
  float c;
  int A_idx;
  int B_idx;
  A_idx = 0;
  B_idx = 0;
  c = C[0];
  for (int k{0}; k < K; k++) {
    float a;
    float b;
    a = A[A_idx];
    b = B[B_idx];
    c += a * b;
    A_idx += LDA;
    B_idx++;
  }
  C[0] = c;
}

static int div_s32_floor(int numerator, int denominator)
{
  int quotient;
  if (denominator == 0) {
    if (numerator >= 0) {
      quotient = MAX_int32_T;
    } else {
      quotient = MIN_int32_T;
    }
  } else {
    unsigned int absDenominator;
    unsigned int absNumerator;
    unsigned int tempAbsQuotient;
    boolean_T quotientNeedsNegation;
    if (numerator < 0) {
      absNumerator = ~static_cast<unsigned int>(numerator) + 1U;
    } else {
      absNumerator = static_cast<unsigned int>(numerator);
    }
    if (denominator < 0) {
      absDenominator = ~static_cast<unsigned int>(denominator) + 1U;
    } else {
      absDenominator = static_cast<unsigned int>(denominator);
    }
    quotientNeedsNegation = ((numerator < 0) != (denominator < 0));
    tempAbsQuotient = absNumerator / absDenominator;
    if (quotientNeedsNegation) {
      absNumerator %= absDenominator;
      if (absNumerator > 0U) {
        tempAbsQuotient++;
      }
      quotient = -static_cast<int>(tempAbsQuotient);
    } else {
      quotient = static_cast<int>(tempAbsQuotient);
    }
  }
  return quotient;
}

static void macroKernel(int M, int K, const float *A, int LDA, const float *B,
                        int LDB, float *C)
{
  int B_idx;
  int j;
  j = 0;
  B_idx = 0;
  while (j <= 0) {
    int A_idx;
    int i;
    j = 0;
    i = 0;
    A_idx = 0;
    while (i <= M - 4) {
      microKernel(K, &A[A_idx], LDA, &B[B_idx], &C[j]);
      A_idx += 4;
      j += 4;
      i += 4;
    }
    while (i <= M - 1) {
      b_microKernel(K, &A[A_idx], LDA, &B[B_idx], &C[j]);
      A_idx++;
      j++;
      i++;
    }
    B_idx += LDB;
    j = 1;
  }
}

static void matrixMultiply(int M, int K, int blockSizeM, const float *A,
                           const float *B, float *C)
{
  const float *B_ptr;
  int b_i;
  int i;
  int i0_ub;
  int k0_ub;
  if (blockSizeM >= M) {
    blockSizeM = M;
  } else {
    blockSizeM = (blockSizeM >> 2) << 2;
    if (blockSizeM <= 0) {
      blockSizeM = 1;
    }
  }
  i0_ub = div_s32_floor(M - 1, blockSizeM) + 1;
  k0_ub = div_s32_floor(K - 1, 144) + 1;
  for (int k0{1}; k0 <= k0_ub; k0++) {
    int K2;
    int k;
    k = (k0 - 1) * 144;
    if (k > K - 144) {
      K2 = K - k;
    } else {
      K2 = 144;
    }
    B_ptr = &B[k];
#pragma omp parallel for num_threads(omp_get_max_threads()) private(i, b_i)

    for (int i0 = 1; i0 <= i0_ub; i0++) {
      i = (i0 - 1) * blockSizeM;
      if (i > M - blockSizeM) {
        b_i = M - i;
      } else {
        b_i = blockSizeM;
      }
      macroKernel(b_i, K2, &A[i + M * k], M, B_ptr, K, &C[i]);
    }
  }
}

static void microKernel(int K, const float *A, int LDA, const float *B,
                        float *C)
{
  float b_c;
  float c;
  float c_c;
  float d_c;
  int A_idx;
  int B_idx;
  A_idx = 0;
  B_idx = 0;
  c = C[0];
  b_c = C[1];
  c_c = C[2];
  d_c = C[3];
  for (int k{0}; k < K; k++) {
    float a;
    float b;
    float b_a;
    float c_a;
    float d_a;
    a = A[A_idx];
    b_a = A[A_idx + 1];
    c_a = A[A_idx + 2];
    d_a = A[A_idx + 3];
    b = B[B_idx];
    c += a * b;
    b_c += b_a * b;
    c_c += c_a * b;
    d_c += d_a * b;
    A_idx += LDA;
    B_idx++;
  }
  C[0] = c;
  C[1] = b_c;
  C[2] = c_c;
  C[3] = d_c;
}

namespace coder {
namespace internal {
namespace ctarget {
void dlnetwork_predict(dlnetwork *obj, const float varargin_1_Data[8],
                       float varargout_1_Data[5])
{
  static const float b_X[400]{
      0.0528936833F,   -0.154573977F,  -0.211811364F,   0.0367278978F,
      0.126143038F,    -0.413057357F,  -0.0011337318F,  -0.111784071F,
      0.112990931F,    -0.0624444783F, -0.167779431F,   -0.0422589034F,
      0.304930091F,    -0.168379739F,  0.136212289F,    0.395827711F,
      -0.126606762F,   0.161195979F,   0.169422314F,    -0.0969584584F,
      -0.0423178F,     0.0564046353F,  0.266051441F,    -0.111587577F,
      0.0230595097F,   -0.27619642F,   0.348420471F,    -0.0647840425F,
      0.369708568F,    -0.231119871F,  -0.181615859F,   0.116492935F,
      0.0926645F,      -0.0554494299F, 0.128823146F,    -0.356605887F,
      -0.457075894F,   0.0869406089F,  -0.203159645F,   -0.0139446435F,
      0.188330367F,    0.481962055F,   0.358179271F,    -0.0365864299F,
      0.155067787F,    -0.126473576F,  -0.0825689062F,  0.24380295F,
      -0.015262844F,   0.409350097F,   -0.353300542F,   -0.215339079F,
      0.365852982F,    -0.153756812F,  -0.195457071F,   0.181126103F,
      0.240718037F,    -0.346880168F,  -0.0164947733F,  0.27060923F,
      -0.311690956F,   -0.0811136663F, -0.0146451974F,  -0.063282989F,
      -0.0225142669F,  -0.42917341F,   0.0060754437F,   -0.0602857322F,
      -0.0116378851F,  0.128325492F,   -0.114748411F,   0.105308741F,
      0.284446895F,    0.103551112F,   0.152729869F,    0.129421756F,
      0.0324160941F,   0.109990977F,   -0.0942629725F,  -0.247385681F,
      0.0384910852F,   -0.21824488F,   0.475474656F,    0.0456326F,
      -0.122923486F,   -0.0511149615F, -0.0571304969F,  -0.534369648F,
      0.216901124F,    -0.0783703774F, 0.197557747F,    0.124886326F,
      -0.140931666F,   0.13126573F,    -0.012432199F,   -0.13047196F,
      0.042876292F,    0.185598359F,   0.372015923F,    0.0534689389F,
      0.0817363188F,   -0.0332891755F, -0.105045982F,   0.0620711409F,
      -0.0372871086F,  -0.029124409F,  -0.0998036191F,  -0.380328F,
      0.207220137F,    0.0351804048F,  0.173829153F,    0.12392386F,
      0.484235317F,    -0.177779287F,  0.274664789F,    0.168588877F,
      0.00478732632F,  -0.346868247F,  0.213295519F,    0.0362823829F,
      0.0905175507F,   0.0890210643F,  0.174760729F,    -0.0747537538F,
      -0.0698054F,     0.00406273501F, 0.132712692F,    -0.0627806708F,
      0.27606529F,     0.468366772F,   0.00908492599F,  0.36150077F,
      -0.0871986449F,  0.322143793F,   0.149992555F,    0.232280433F,
      0.03427599F,     -0.447065294F,  -0.0521061458F,  0.0655935258F,
      0.142105773F,    0.216964826F,   -0.0516068153F,  -0.255933136F,
      0.28642261F,     -0.0396624915F, -0.231362715F,   0.165181026F,
      0.146985F,       0.130107F,      -0.243706182F,   -0.159941941F,
      0.0699756593F,   -0.419170529F,  -0.330062479F,   0.032135658F,
      0.295757055F,    0.440248102F,   0.328950822F,    -0.273399621F,
      -0.118544474F,   -0.410366952F,  0.347252041F,    0.101416603F,
      -0.0443680845F,  0.132407099F,   0.0090431748F,   0.36729002F,
      -0.482325F,      -0.0703351274F, -0.435319066F,   0.0820304F,
      -0.269273818F,   -0.136933193F,  0.0305571966F,   -0.177086741F,
      0.0825170428F,   -0.115469515F,  0.125084817F,    -0.0122730946F,
      -0.158695579F,   0.205425575F,   -0.0292761847F,  -0.0918445215F,
      0.0761195123F,   -0.0119077051F, -0.0277055781F,  -0.205844909F,
      -0.286673456F,   0.0192606524F,  -0.03203227F,    0.00428414531F,
      0.269567758F,    0.0912550911F,  -0.0148931965F,  -0.0339155681F,
      -0.0829902291F,  0.0865185484F,  -0.341197878F,   -0.15418157F,
      -0.503416181F,   -0.130167052F,  -0.375187427F,   0.522108555F,
      0.0257369969F,   -0.0925401822F, 0.144559056F,    -0.549055159F,
      -0.353523105F,   0.614904225F,   -0.399806798F,   0.865704358F,
      -0.316196144F,   -0.205128551F,  0.0719436258F,   -0.292729616F,
      0.11903958F,     0.100474231F,   -0.0267108493F,  0.707245946F,
      -0.19853729F,    -0.420186073F,  0.048550263F,    -0.141289383F,
      0.259843796F,    0.0815704092F,  0.145162225F,    -0.133342624F,
      -0.00961210765F, -0.0745670572F, -0.0442447364F,  0.169141069F,
      -0.00719062099F, -0.0253509767F, 0.0373278297F,   -0.0801314F,
      -0.172912955F,   -0.340533525F,  0.0691505298F,   0.0132243177F,
      0.36022383F,     -0.214088038F,  -0.106793806F,   -0.103956372F,
      -0.200459391F,   0.233565F,      -0.377216339F,   0.291041166F,
      -0.37818104F,    0.380517542F,   -0.565533698F,   0.197589487F,
      -0.225898847F,   -0.0474066809F, -0.00571972132F, 0.119976938F,
      0.0506237932F,   -0.39282468F,   0.137577251F,    0.578097463F,
      0.322050512F,    0.227177262F,   -0.0516415685F,  0.333569705F,
      -0.180703536F,   -0.243596822F,  0.15899767F,     -0.360350579F,
      -0.0952728F,     1.0044167F,     -0.320705831F,   0.570851445F,
      0.0744261071F,   -0.124928F,     -0.0320409685F,  -0.212100148F,
      0.161037371F,    -0.776124895F,  0.112934925F,    0.559228361F,
      -0.0602580234F,  -0.0460105091F, 0.0666216165F,   -0.473191261F,
      0.0802673474F,   0.314091742F,   1.29013836F,     0.238524511F,
      0.122724757F,    0.0585118607F,  0.330812752F,    0.0606501438F,
      -0.0410348438F,  -0.097771287F,  0.018087808F,    0.943593085F,
      0.256209463F,    -0.111607455F,  0.473506808F,    0.25630185F,
      0.320750028F,    -0.245775357F,  0.115179852F,    -0.152443632F,
      0.000626931374F, 0.381393403F,   -0.00876644161F, -0.0392552912F,
      0.0778897181F,   0.18115367F,    -0.489410609F,   -0.105590522F,
      -0.298295915F,   -0.418767929F,  -0.0910385549F,  0.140439764F,
      0.310036242F,    -0.292685121F,  0.096665822F,    0.0791519582F,
      -0.299594671F,   -0.334102631F,  -0.0502361394F,  0.626771867F,
      1.6927954F,      -0.483135223F,  -0.0261265058F,  -0.0526546314F,
      -0.312197745F,   0.0432728343F,  0.0751769692F,   0.0525088161F,
      0.054074131F,    -0.228716761F,  1.15979207F,     -0.253535926F,
      0.397118598F,    -0.162961796F,  0.311778039F,    -0.245793149F,
      0.20800738F,     0.225274563F,   -0.0331419446F,  -0.119879127F,
      -0.0412051342F,  0.270444214F,   -0.111195266F,   -0.130474269F,
      -0.11626675F,    -0.172108948F,  -0.328059614F,   -0.0863067508F,
      0.16494301F,     -0.258308858F,  0.287567556F,    0.0346691199F,
      0.304252684F,    -0.137201443F,  -0.0915376395F,  -0.0562784523F,
      0.072859779F,    0.314282179F,   -0.00827985071F, 0.00892305188F,
      -0.244685397F,   -0.0519497097F, 0.247024849F,    -0.328836888F,
      0.0955086723F,   0.0198046435F,  0.52538228F,     -0.136339262F,
      0.448949724F,    0.22514534F,    0.105270356F,    -0.181228399F,
      0.23173961F,     0.232519105F,   0.26313448F,     0.0990907773F,
      0.294565678F,    -0.255871922F,  1.44505322F,     -0.250573397F,
      -0.335235536F,   0.161920279F,   -0.28926149F,    -0.123315752F,
      0.0766607225F,   0.101864189F,   -0.115284413F,   0.0489280075F,
      0.593659103F,    -0.359213442F,  0.241117984F,    0.206006527F,
      0.481790334F,    -0.109198116F,  0.395100296F,    0.0929791927F};
  static const float c_X[400]{
      0.142734885F,    -0.196085185F,    -0.256203532F,   0.129502878F,
      0.0464761108F,   0.440247595F,     -0.182133719F,   0.491555601F,
      0.0843282789F,   -0.271009594F,    0.264290482F,    0.59478116F,
      0.228345394F,    0.120981678F,     0.0775782466F,   0.135735795F,
      0.593684793F,    0.364019811F,     0.15953134F,     -0.164723843F,
      -0.117745407F,   0.132447556F,     -0.17341888F,    0.219126895F,
      0.15258798F,     0.151993677F,     -0.262341589F,   0.220443875F,
      -0.0815993175F,  -0.167585567F,    0.230418846F,    0.0683896169F,
      0.0870649144F,   -0.177526489F,    -0.0426673628F,  -0.49908331F,
      0.100007854F,    -0.258323222F,    0.316618592F,    -0.299079955F,
      0.229091302F,    -0.179815784F,    0.124712318F,    0.55753547F,
      0.528939426F,    -0.39359194F,     -0.512521088F,   0.47866118F,
      0.147628188F,    0.343982399F,     -0.695236921F,   0.325818598F,
      -0.610201538F,   -0.33551392F,     0.0594761595F,   -0.526345849F,
      -0.335705042F,   0.737391F,        -0.0578932203F,  -0.0715549F,
      0.0572032034F,   -0.0913679674F,   0.169536158F,    0.116260938F,
      -0.0267708488F,  -0.206963018F,    -0.00809497572F, 0.0732059106F,
      0.0406668261F,   -0.0949366391F,   0.0038675461F,   0.0736502931F,
      0.47023356F,     0.194911599F,     0.0717937F,      0.161118045F,
      0.154025689F,    0.0950056687F,    0.0946626216F,   0.198255152F,
      0.0759031251F,   0.177553773F,     -0.295041293F,   0.123107634F,
      0.0697151423F,   -0.908493519F,    -0.253158748F,   0.253097445F,
      -0.185883433F,   -0.0596378F,      0.0908346325F,   0.0252405833F,
      -0.00352524687F, 0.396706134F,     0.0805207789F,   0.249873325F,
      0.180316761F,    0.27398628F,      -0.0650270954F,  -0.0357954204F,
      -0.0859317109F,  0.284050256F,     0.080683358F,    -0.248735785F,
      -0.0864221081F,  0.00615647854F,   0.240425259F,    0.0829683244F,
      -0.101037048F,   0.195570663F,     -0.35083279F,    -0.364834785F,
      0.128806323F,    0.00818335451F,   -0.133676142F,   0.0529596396F,
      0.391068637F,    -0.0357222296F,   0.33058244F,     -0.572517097F,
      -0.0146716498F,  0.654277205F,     -0.157498971F,   0.399237841F,
      -0.386904687F,   0.0469624959F,    -0.318462551F,   -0.018537309F,
      0.283869088F,    -0.000122106358F, 0.199507713F,    -0.268172234F,
      -0.535111904F,   0.713364482F,     0.124333516F,    0.0450203717F,
      -0.0473486148F,  0.284550905F,     0.378987223F,    -0.555482328F,
      0.375901163F,    0.102641553F,     0.334905803F,    0.410332471F,
      0.31969738F,     -0.479776531F,    -0.354870111F,   0.147037357F,
      0.0560121723F,   0.632805526F,     -0.0136691425F,  0.255011499F,
      -0.0654352382F,  0.353349179F,     0.673519671F,    0.249542058F,
      -0.225921676F,   0.606089711F,     -0.139096975F,   0.213832334F,
      -0.277808517F,   0.0127600096F,    0.283686191F,    -0.327712119F,
      0.263325661F,    0.178929135F,     -0.127227321F,   -0.0199033841F,
      -0.338550955F,   -0.187453404F,    0.035427168F,    -0.0665127411F,
      0.313006401F,    0.255316734F,     0.0353813581F,   -0.286643803F,
      -0.0571268573F,  -0.157005414F,    0.214963436F,    -0.0557053722F,
      1.1441648F,      -0.115505151F,    0.606683552F,    0.0248603486F,
      0.11263676F,     -0.0332362726F,   -0.334774971F,   0.393103957F,
      0.786726892F,    0.620277762F,     0.941554964F,    -0.14044553F,
      -0.104828432F,   0.155591667F,     1.16470134F,     -0.182648197F,
      0.0767541677F,   0.0144241862F,    -0.851281762F,   0.0847845748F,
      0.206060499F,    -0.0875878483F,   -0.365769684F,   -0.306172878F,
      -0.29708904F,    -0.278435409F,    0.188470021F,    0.127385229F,
      0.322540224F,    -0.211245686F,    0.121208899F,    -0.371742249F,
      -0.199765429F,   0.214313418F,     0.249125764F,    0.311002731F,
      -0.101123862F,   -0.00879075285F,  -0.182937518F,   -0.154671222F,
      0.767514467F,    0.0114781335F,    0.453817248F,    -0.232297286F,
      0.248043582F,    0.0785567239F,    -0.0351859704F,  -0.313646406F,
      0.730095685F,    0.168227509F,     0.139431313F,    -0.186207071F,
      0.196461797F,    -0.091782257F,    0.394169122F,    0.37349382F,
      0.00137215853F,  -0.192090511F,    -0.33326146F,    -0.237128079F,
      0.0135476151F,   0.0813561156F,    -0.463967353F,   0.176652953F,
      0.223997712F,    0.0430773348F,    -0.494954884F,   -0.115549579F,
      -0.0780647323F,  -0.111993767F,    0.317149073F,    0.517766833F,
      -0.0401866622F,  -0.114476122F,    0.141809419F,    -0.065966621F,
      0.159690887F,    0.148936212F,     -0.164824903F,   -0.0365686305F,
      0.136864439F,    0.135566741F,     0.0479469039F,   -0.0162322111F,
      0.0234145466F,   0.18113558F,      0.0257941671F,   0.075217627F,
      0.121941715F,    -0.0159887336F,   0.299381644F,    -0.232980937F,
      0.0215995573F,   0.303941697F,     0.0980531424F,   0.204958707F,
      0.361209512F,    -0.18856293F,     -0.117985167F,   -0.464391977F,
      -0.151220471F,   -0.00799280684F,  -0.067327261F,   -0.0795277208F,
      -0.0420524441F,  -0.486752301F,    -0.149318978F,   0.196423545F,
      0.0889780447F,   0.0368153565F,    0.221511364F,    -0.29944846F,
      -0.0188990254F,  -0.181527123F,    -0.0781435817F,  0.185446367F,
      0.231223747F,    0.0271907672F,    -0.036459893F,   -0.0532845408F,
      -0.00197133864F, 0.238567337F,     -0.170954853F,   0.253143251F,
      -0.0819981545F,  0.197314486F,     -0.328277141F,   0.00538572948F,
      -0.279543281F,   0.0477955826F,    -0.112976193F,   -0.0168482568F,
      -0.611558914F,   0.507657349F,     -0.132706359F,   -0.00567034585F,
      0.215888828F,    -0.0131227644F,   0.000360726379F, -0.400349885F,
      -0.155423149F,   -0.0895756111F,   0.371364951F,    -0.239135F,
      0.0547219068F,   0.1505339F,       -0.0139250765F,  -0.0946561545F,
      -0.157028973F,   0.0234870836F,    0.110389963F,    0.138800636F,
      0.0170355085F,   0.204047576F,     -0.0997567475F,  0.120997466F,
      -0.227938026F,   0.0390132852F,    -0.162640899F,   -0.0136359092F,
      0.317260832F,    0.367284F,        -0.129853919F,   0.108869135F,
      0.388622344F,    0.0785939321F,    -0.169635639F,   0.0784632F,
      -0.191620111F,   -0.117987782F,    -0.0802778229F,  0.156190023F,
      0.37860164F,     -0.132546082F,    0.3627159F,      -0.224952266F,
      -0.0683892518F,  -0.0181037597F,   -0.168939352F,   0.0893636495F,
      -0.158541828F,   0.585765064F,     0.0605012514F,   0.0844160318F,
      0.197536051F,    -0.161920413F,    -0.11471533F,    0.171527863F,
      0.358787984F,    -0.181725785F,    -0.345555723F,   0.284979403F,
      -0.168766484F,   0.116424844F,     -0.0428188369F,  -0.0244228225F,
      -0.257434368F,   -0.032940872F,    0.157434896F,    -0.28179121F,
      0.0498713851F,   -0.152320758F,    0.366452634F,    -0.0905631706F,
      0.0102386912F,   0.380897343F,     0.496783853F,    -0.314811379F,
      0.39041546F,     0.0643971637F,    0.290829152F,    -0.102200963F,
      -0.25824973F,    -0.115550205F,    -0.0840963796F,  0.381616026F,
      0.925581038F,    -0.245471805F,    -0.159747347F,   -0.273314506F};
  static const float d_X[400]{
      -0.347319305F,   0.168599591F,    -0.305774152F,   0.171305746F,
      0.0659794137F,   -0.403653F,      0.276339293F,    -0.040522255F,
      0.288032413F,    0.219572797F,    -0.106546834F,   0.236586019F,
      -0.211417317F,   -0.27919963F,    -0.25691241F,    0.135036588F,
      0.358219743F,    0.0350716673F,   0.125838891F,    -0.134724706F,
      -0.0273288451F,  0.46644327F,     -0.0938559622F,  -0.245883182F,
      0.00847704057F,  -0.00161312672F, -0.0697553754F,  -0.316585153F,
      -0.260691047F,   0.271491498F,    -0.464884162F,   -0.00826226175F,
      -0.0072257095F,  0.0198452938F,   0.0265519973F,   -0.0909397826F,
      0.084485881F,    0.0537744761F,   -0.438453555F,   0.444810957F,
      -0.310169339F,   -0.206935957F,   0.150578141F,    -0.206249714F,
      -0.143765345F,   -0.723226249F,   0.237673968F,    0.234808281F,
      0.251429409F,    0.108805016F,    -0.108169712F,   -0.209669083F,
      -0.149328485F,   -0.487031847F,   0.161940008F,    -0.124195457F,
      0.0711218938F,   0.124756165F,    0.400956631F,    -0.169131592F,
      -0.0333887115F,  0.213310912F,    -0.220789135F,   -0.162061F,
      0.336420715F,    -0.0702377185F,  -0.0381876156F,  0.267126262F,
      0.0593104623F,   0.617901325F,    0.0338988341F,   -0.279919952F,
      -0.117700167F,   -0.0619272143F,  -0.155544F,      0.138896614F,
      -0.142843515F,   -0.548932314F,   0.0152076762F,   -0.0175404046F,
      0.159124538F,    0.392190963F,    0.211758539F,    0.58910656F,
      -0.611639321F,   -0.26141113F,    0.401587874F,    0.0429249927F,
      -0.241673961F,   0.204095602F,    0.201909438F,    0.527749419F,
      -0.555267096F,   0.368336558F,    -0.111883797F,   -0.250392556F,
      0.09015F,        0.321268439F,    -0.600375354F,   0.736120164F,
      0.557397783F,    0.106897764F,    -0.446206063F,   -0.220903844F,
      0.0252580903F,   0.108556382F,    -0.475720912F,   0.0405516922F,
      -0.144605979F,   -0.00973960478F, 0.181104615F,    0.27113536F,
      0.589825809F,    0.312707484F,    0.117790662F,    -0.185716674F,
      0.0314130411F,   0.273539096F,    0.301565647F,    0.31216529F,
      0.171459317F,    -0.231369153F,   0.0276789498F,   0.000570185424F,
      -0.0787954852F,  -0.280790716F,   -0.106222555F,   0.141385198F,
      0.159369916F,    0.392517388F,    -0.679864407F,   -0.223870561F,
      0.141489744F,    -0.0569498725F,  0.639714F,       0.123961702F,
      -0.234539524F,   -0.20651038F,    0.0950684696F,   0.129808754F,
      0.63451612F,     0.0932035893F,   0.301974416F,    0.501700222F,
      -0.274025202F,   0.0245383214F,   0.092893444F,    -0.249995068F,
      -0.160229266F,   0.0778247043F,   0.0485292F,      0.211231783F,
      -0.292534351F,   0.153062686F,    -0.601203799F,   0.390978873F,
      0.0150420833F,   -0.0640370846F,  -0.330427885F,   0.166067F,
      -0.186977267F,   0.297915101F,    -0.0672702044F,  -0.239734143F,
      0.163028017F,    -0.218537912F,   0.208459407F,    0.152809411F,
      0.395397037F,    0.257409483F,    -0.0243631229F,  -0.326150358F,
      -0.00459682103F, -0.101650126F,   0.137775615F,    0.538496435F,
      0.481266588F,    0.247353509F,    0.561477721F,    -0.232896745F,
      0.0117617669F,   -0.270220786F,   0.213043511F,    -0.126149178F,
      -0.0581426583F,  -0.355789155F,   0.146758303F,    0.438543171F,
      0.0339853875F,   0.290851682F,    -0.211526543F,   -0.144826174F,
      0.0982161462F,   -0.83269006F,    -0.239224687F,   0.0528856777F,
      -0.177326068F,   0.0419974104F,   0.175124392F,    -0.785490155F,
      0.0464647748F,   0.12215738F,     0.172150597F,    -0.226475134F,
      0.0161182042F,   -0.701902151F,   0.00040633732F,  -0.330701977F,
      -0.243462056F,   0.0262407456F,   0.359226704F,    -0.243714064F,
      -0.0135140773F,  0.185384735F,    0.0396852531F,   0.071165368F,
      -0.131068617F,   0.190094888F,    0.0525067821F,   -0.146545649F,
      -0.152479425F,   0.287442833F,    -0.0747053772F,  0.237767786F,
      0.253669113F,    -0.0832674578F,  -0.339981556F,   -0.189781025F,
      -0.169406042F,   0.193374559F,    0.0368618965F,   0.132484034F,
      0.232129052F,    0.17618461F,     -0.345853F,      -0.246932626F,
      -0.242063507F,   -0.255840063F,   0.0839576721F,   0.255546F,
      0.285765886F,    0.0928072184F,   0.0861936957F,   -0.298274368F,
      0.103955977F,    0.243683144F,    -0.00511271739F, -0.127803281F,
      -0.239539981F,   0.200811461F,    -0.105074733F,   0.352657378F,
      0.00630779611F,  -0.0401570573F,  0.312311F,       0.118898436F,
      0.0587282442F,   0.183525711F,    0.0330740549F,   0.275085449F,
      0.119887926F,    0.299980253F,    0.27553153F,     -0.139330968F,
      -0.198403791F,   0.0275261942F,   -0.0615035407F,  -0.241651818F,
      -0.00186882308F, 0.214120165F,    -0.0982658789F,  0.0011007149F,
      -0.21020925F,    0.0862814412F,   0.122183412F,    -0.272305906F,
      0.0430617109F,   -0.345281273F,   -0.079320617F,   0.180757344F,
      0.0592241287F,   0.179857582F,    0.382382035F,    0.0815627202F,
      -0.530560732F,   -0.00496082567F, 0.501383662F,    0.131654888F,
      -0.0310180243F,  -0.318045378F,   -0.543287814F,   -0.404882342F,
      0.0813652575F,   -0.123405024F,   0.307808131F,    0.232699528F,
      0.461694479F,    0.619839609F,    0.0809858143F,   0.376645267F,
      0.13360545F,     0.2233143F,      0.0267062448F,   0.281776637F,
      -0.440329194F,   -0.125818804F,   -0.157158852F,   0.255622268F,
      0.398723304F,    -0.280987144F,   -0.181643963F,   0.0267432779F,
      -0.383218914F,   0.203090772F,    0.227738008F,    -0.346893847F,
      -0.285198599F,   -0.0383608676F,  0.00410993025F,  0.20632787F,
      0.137035847F,    0.0907678828F,   -0.492434293F,   0.149721578F,
      0.100783132F,    -0.72891736F,    0.109941006F,    0.13634409F,
      0.299450219F,    0.088589035F,    -0.122494653F,   0.119422927F,
      -0.31791994F,    0.132787481F,    0.0513058901F,   -0.172622576F,
      -0.410418F,      -0.0454947427F,  0.225008219F,    -0.117323205F,
      0.506414831F,    0.363209814F,    0.015899593F,    -0.0886571258F,
      0.359652132F,    -0.172217369F,   0.105327502F,    0.331843019F,
      0.187506199F,    0.115186989F,    -0.157308981F,   -0.269838154F,
      -0.338420957F,   -0.436011851F,   -0.229984775F,   0.171528116F,
      0.239856705F,    -0.110375874F,   0.150567681F,    -0.268695861F,
      -0.238955632F,   0.0899524465F,   0.0619887188F,   -0.0183748528F,
      0.45854947F,     -0.158507049F,   -0.223532215F,   0.32741797F,
      0.331253976F,    -0.0327971801F,  -0.0874702707F,  -0.31479156F,
      0.150392771F,    -0.0418319292F,  0.244806468F,    -0.108158037F,
      -0.204671338F,   0.0484482497F,   0.173815459F,    -0.342985779F,
      -0.0345175229F,  0.208209038F,    0.303532541F,    -0.00213889964F,
      -0.19320482F,    0.151889279F,    -0.26761055F,    0.0417644493F,
      -0.122246124F,   0.161173299F,    0.0305577517F,   0.184510723F,
      -0.271933734F,   -0.144772902F,   0.27823627F,     -0.477130324F,
      0.194779485F,    -0.0137287732F,  -0.0766602531F,  0.186625689F};
  static const float X[160]{
      -0.209615469F,   -0.0458837487F,  0.0286150444F,   -0.806491792F,
      1.19690275F,     -0.532480538F,   0.302473634F,    -0.260888308F,
      0.124607936F,    -0.202360421F,   -0.0871819258F,  -0.136278093F,
      -0.124422163F,   0.00499413395F,  -0.215639666F,   -0.222263649F,
      0.0053140535F,   -0.273349583F,   0.331960648F,    -0.49140352F,
      -0.815222442F,   0.41938436F,     0.339492679F,    -1.38077283F,
      1.66426015F,     -0.486578166F,   -0.128541723F,   -0.978308141F,
      0.263828069F,    -0.455227733F,   0.21273163F,     -0.081513375F,
      0.494130641F,    0.506982923F,    0.198890552F,    -0.0101768067F,
      -3.48729634F,    0.969392F,       0.798454762F,    -0.348184347F,
      -0.54202354F,    0.206584722F,    -0.230041549F,   -0.938660502F,
      1.50605059F,     -0.211409107F,   0.226819158F,    -0.140662864F,
      0.216234267F,    -1.13798833F,    -0.129972711F,   -0.944446F,
      0.0177231953F,   0.282755792F,    0.0278111789F,   0.15825367F,
      -0.0209331792F,  -0.112560399F,   0.939265907F,    -0.445009679F,
      -0.16184774F,    -0.151141435F,   -1.17811835F,    0.218506142F,
      -0.137424394F,   0.129559636F,    -1.15320778F,    -0.112188555F,
      -0.0175615847F,  0.4581393F,      -0.981557548F,   0.0487433858F,
      -0.806889176F,   -1.18791366F,    -0.012835199F,   -0.393880278F,
      0.00441660918F,  -0.934443414F,   0.344103038F,    0.0625105947F,
      -0.570332527F,   -0.122697785F,   -0.0206523743F,  -0.231642544F,
      -0.032502804F,   0.0568346083F,   0.0722024143F,   0.111131303F,
      -0.109084785F,   0.0920609459F,   0.0196556766F,   0.37614432F,
      -0.0715550333F,  -0.00811870396F, -0.9573313F,     0.246287227F,
      -0.00105246517F, 0.0886915177F,   0.32506761F,     0.0392145067F,
      0.297316551F,    -0.70163995F,    -0.021340318F,   0.0511155874F,
      0.55969578F,     -0.27051422F,    -0.0243825931F,  -0.640894711F,
      -0.596854687F,   0.40838632F,     -0.00459698075F, -0.33747831F,
      0.0537784062F,   0.000135610506F, 0.0275937431F,   0.51654166F,
      0.00446034269F,  0.0345620476F,   -0.337514192F,   -1.36734378F,
      0.310065985F,    0.0175830536F,   -0.0641861632F,  0.0332298912F,
      0.286455244F,    0.641713619F,    0.0237587169F,   -0.0595782101F,
      -0.118518524F,   -0.143832788F,   -0.0345717445F,  -0.192700237F,
      -0.0542964526F,  0.00534654642F,  0.114243403F,    -0.00916660577F,
      -0.00129981444F, -0.259484887F,   -0.237237066F,   0.0261932258F,
      0.0787760615F,   -0.317142159F,   -0.0424251F,     0.0231744703F,
      0.129200906F,    -0.423961F,      0.0157501381F,   -0.317817569F,
      0.150365978F,    0.104685411F,    0.0356117636F,   -0.0700777769F,
      -0.0551222786F,  -0.0176861677F,  -0.00227650092F, 0.396447569F,
      0.00118331169F,  0.0550124794F,   -0.150330991F,   -0.0518483929F};
  static const float e_X[100]{
      -0.122574434F,  -0.0888602287F, -0.249366745F,  -0.0904229F,
      0.494635522F,   -0.0833538771F, -0.115698434F,  -0.264199525F,
      -0.11329782F,   0.402288407F,   -0.127060607F,  -0.0559289455F,
      0.015765544F,   -0.128533527F,  0.224900916F,   -0.230302989F,
      0.229125544F,   -0.0450264029F, 0.198412478F,   0.191256091F,
      0.279009491F,   -0.0824367106F, 0.268490613F,   -0.136070505F,
      -0.100512706F,  -0.073024258F,  0.52704668F,    0.175541103F,
      0.626474857F,   -0.0947297066F, -0.385465324F,  -0.332941055F,
      -0.341516644F,  -0.207676679F,  -0.412935793F,  0.115113743F,
      -0.395804346F,  -0.144446284F,  -0.321987778F,  -0.029944377F,
      0.107535794F,   0.109098934F,   0.0472221971F,  0.217305273F,
      -0.361263841F,  -0.336213201F,  0.245000035F,   -0.230326578F,
      0.312380642F,   0.238796651F,   -0.338897288F,  0.0677139387F,
      -0.337479413F,  0.440171182F,   -0.153026119F,  0.37387076F,
      -0.160792246F,  0.1434789F,     -0.105013594F,  -0.217135698F,
      0.0340282507F,  0.178387627F,   0.138509572F,   0.222204745F,
      -0.556856632F,  -0.140431449F,  0.0292617921F,  -0.0945160165F,
      0.314930201F,   -0.616977274F,  -0.102996781F,  0.133657515F,
      0.0168185811F,  0.287120551F,   -0.712953329F,  0.177977979F,
      -0.0627367944F, 0.0183970444F,  -0.0637000427F, -0.261162F,
      0.287885845F,   -0.405496269F,  -0.137632757F,  -0.114619277F,
      -0.197889194F,  -0.53741771F,   -0.0157085303F, -0.3917512F,
      -0.214685559F,  -0.208837464F,  -0.101981536F,  -0.252710342F,
      -0.0996264145F, -0.31533128F,   -0.56194222F,   0.198577061F,
      -0.0419341661F, 0.249473661F,   -0.229572937F,  -0.122667693F};
  static const float W[20]{
      0.0264424682F,  -0.159463435F,  -0.0186699573F, -0.0790394619F,
      -0.0338557251F, 0.107791536F,   0.0336158089F,  0.257665247F,
      0.00572798634F, -0.0260433443F, -0.10392078F,   -0.189236149F,
      -0.118531778F,  -0.178486124F,  0.0535128564F,  0.0427137166F,
      -0.0160061251F, -0.0186651032F, 0.266580939F,   -0.049186442F};
  static const float b_W[20]{
      0.0967921168F, 0.101691887F,   0.0317679085F,  0.040020708F,
      -0.14600192F,  -0.07764633F,   0.105244532F,   0.0925671756F,
      0.179905787F,  0.0973364413F,  -0.137146935F,  0.106596082F,
      -0.20079048F,  -0.0260126609F, 0.0294486918F,  0.0643906519F,
      0.0136687746F, 0.162536919F,   -0.0386369601F, 0.041172713F};
  static const float b_t0_CombinedBeta[20]{
      -0.378331721F, 0.12053673F,   -1.23641181F,  0.899550676F,
      0.860278249F,  0.300863624F,  -0.875177205F, -0.154241621F,
      -0.351272255F, -1.6947273F,   0.249747247F,  -1.18467391F,
      0.347064793F,  -0.150103241F, -0.115065232F, -0.253407389F,
      -0.154427692F, 0.426815897F,  -0.434045047F, -0.188360944F};
  static const float b_t0_CombinedGamma[20]{
      1.84031272F,  3.34942722F, 1.96582282F,  3.38855958F, 1.5245719F,
      1.79662716F,  3.87435484F, 0.907484233F, 2.38545251F, 1.68593085F,
      0.895091176F, 1.26735818F, 1.73571432F,  1.66614652F, 2.71415567F,
      1.69692218F,  2.06820703F, 0.79855144F,  2.65618181F, 0.968058169F};
  static const float c_t0_CombinedBeta[20]{
      0.242557883F,  -1.05214167F,  0.303241521F, 0.464645F,     -1.0812223F,
      0.603439689F,  0.372901708F,  -1.67702842F, 0.0409430861F, 1.06420469F,
      -0.789868116F, -0.868483305F, -0.3660568F,  -0.707573295F, -0.656206429F,
      -0.421197534F, -0.880626559F, 0.193475127F, -0.141125F,    0.485539019F};
  static const float c_t0_CombinedGamma[20]{
      2.89119482F,  2.0014708F,   1.17038023F, 2.76925397F, 2.42100453F,
      0.703296661F, 1.24990845F,  2.84444332F, 1.47140932F, 1.92416966F,
      2.21638823F,  2.91901469F,  1.63699579F, 2.33374715F, 3.39648104F,
      1.94952881F,  0.760383964F, 1.77891481F, 1.38766742F, 1.02353048F};
  static const float d_t0_CombinedBeta[20]{
      -1.22944236F,   -0.943919361F,  -0.00523183122F, 0.598746955F,
      -0.290929794F,  1.08470774F,    1.20495176F,     -0.275935352F,
      -0.16376105F,   -1.18475056F,   0.285037339F,    0.248256505F,
      0.47198841F,    0.908567429F,   -0.222509325F,   1.24144268F,
      -0.0244605094F, -0.0479724556F, -0.211723417F,   -0.38000223F};
  static const float d_t0_CombinedGamma[20]{
      2.45864773F,  1.17642057F, 1.58311069F, 1.60818386F, 1.31449163F,
      1.05732358F,  1.88228357F, 1.44909036F, 1.03705621F, 1.71419466F,
      0.592359424F, 1.56566799F, 1.2372911F,  1.22229934F, 1.1651597F,
      1.61091518F,  2.61140299F, 1.142542F,   1.02015185F, 1.18462455F};
  static const float fv[20]{
      0.0624196604F,   0.093998827F,   -0.0730165839F, -0.184406579F,
      -0.00381580298F, 0.0735312F,     -0.0575226806F, 0.0883374F,
      0.0892926157F,   -0.0541989282F, 0.109722875F,   0.0888088495F,
      -0.142988011F,   0.0189412422F,  -0.0389072858F, 0.266032457F,
      -0.0535125583F,  -0.137767211F,  0.0573621877F,  0.137128428F};
  static const float fv1[20]{
      -0.119502217F,   -0.0410381928F, 0.0198212434F,  0.150268093F,
      0.0456756242F,   -0.0105417771F, 0.0363146625F,  -0.121113203F,
      0.128490865F,    -0.0163055621F, -0.0132357758F, -0.0921900496F,
      -0.00450165942F, -0.0823502168F, -0.0532314777F, -0.202113032F,
      0.0905435607F,   0.0011307752F,  0.0807540268F,  0.055908408F};
  static const float t0_CombinedBeta[20]{
      0.474870175F,  0.480984509F, 0.342275172F,  1.33586526F,   -1.37677431F,
      0.678736031F,  0.519791424F, 0.683969617F,  0.253699124F,  -0.78754288F,
      0.415104151F,  0.123630807F, 0.367261589F,  0.137029469F,  0.312934399F,
      -0.632878482F, 6.24030209F,  0.0351241902F, -0.437813938F, 0.660257041F};
  static const float t0_CombinedGamma[20]{
      0.0438648611F, 0.0392387696F, 0.0869005099F, 0.119985536F,
      0.0769904107F, 0.049606666F,  0.100592889F,  0.0423274636F,
      0.0833325759F, 0.0808442459F, 0.1164556F,    0.07964053F,
      0.0712315068F, 0.117280021F,  0.0703938082F, 0.0487482622F,
      0.527862668F,  0.0411105268F, 0.072418429F,  0.0564369187F};
  static const float fv2[5]{0.0193819851F, 0.153464645F, -0.0775077716F,
                            0.0436395667F, -0.360634804F};
  anonymous_function r;
  cell_wrap_16 outT_f3;
  cell_wrap_16 outT_f6;
  if (!obj->IsNetworkInitialized) {
    obj->IsNetworkInitialized = true;
  }
  std::copy(&W[0], &W[20], &outT_f3.f1[0]);
  matrixMultiply(20, 8, 96, &X[0], &varargin_1_Data[0], &outT_f3.f1[0]);
  for (int i{0}; i < 20; i++) {
    outT_f3.f1[i] = t0_CombinedGamma[i] * outT_f3.f1[i] + t0_CombinedBeta[i];
  }
  r.workspace.scaleCast = 0.2F;
  layer::elementwiseOperationInPlace(r, outT_f3.f1);
  std::copy(&b_W[0], &b_W[20], &outT_f6.f1[0]);
  matrixMultiply(20, 20, 96, &b_X[0], &outT_f3.f1[0], &outT_f6.f1[0]);
  for (int i{0}; i < 20; i++) {
    outT_f6.f1[i] =
        b_t0_CombinedGamma[i] * outT_f6.f1[i] + b_t0_CombinedBeta[i];
  }
  r.workspace.scaleCast = 0.2F;
  std::copy(&outT_f6.f1[0], &outT_f6.f1[20], &outT_f3.f1[0]);
  layer::elementwiseOperationInPlace(r, outT_f3.f1);
  std::copy(&fv[0], &fv[20], &outT_f6.f1[0]);
  matrixMultiply(20, 20, 96, &c_X[0], &outT_f3.f1[0], &outT_f6.f1[0]);
  for (int i{0}; i < 20; i++) {
    outT_f6.f1[i] =
        c_t0_CombinedGamma[i] * outT_f6.f1[i] + c_t0_CombinedBeta[i];
  }
  r.workspace.scaleCast = 0.2F;
  std::copy(&outT_f6.f1[0], &outT_f6.f1[20], &outT_f3.f1[0]);
  layer::elementwiseOperationInPlace(r, outT_f3.f1);
  std::copy(&fv1[0], &fv1[20], &outT_f6.f1[0]);
  matrixMultiply(20, 20, 96, &d_X[0], &outT_f3.f1[0], &outT_f6.f1[0]);
  for (int i{0}; i < 20; i++) {
    outT_f6.f1[i] =
        d_t0_CombinedGamma[i] * outT_f6.f1[i] + d_t0_CombinedBeta[i];
  }
  r.workspace.scaleCast = 0.2F;
  std::copy(&outT_f6.f1[0], &outT_f6.f1[20], &outT_f3.f1[0]);
  layer::elementwiseOperationInPlace(r, outT_f3.f1);
  for (int i{0}; i < 5; i++) {
    varargout_1_Data[i] = fv2[i];
  }
  matrixMultiply(5, 20, 96, &e_X[0], &outT_f3.f1[0], &varargout_1_Data[0]);
}

} // namespace ctarget
} // namespace internal
} // namespace coder

// End of code generation (predict.cpp)
